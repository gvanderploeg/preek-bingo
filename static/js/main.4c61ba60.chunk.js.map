{"version":3,"sources":["Woord.js","Bord.js","App.js","serviceWorker.js","index.js"],"names":["Woord","props","tickx","elem","tick","console","log","state","ticked","setState","onDecreaseScore","onIncreaseScore","word","onClick","this","className","React","Component","Bord","score","increaseScore","bind","decreaseScore","prevState","rows","i","cols","j","push","Col","key","woorden","pop","Row","Container","App","array","length","Math","floor","random","temp","shuffleArray","WoordenAlgemeen","Jumbotron","woordenAlgemeen","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ioBA0CeA,E,YAnCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KASVC,MAAQ,SAACC,KAVU,EAanBC,KAAO,SAACD,GACJE,QAAQC,IAAI,WAAaH,GAErB,EAAKI,MAAMC,QACX,EAAKC,SAAS,CAACD,QAAQ,IACvB,EAAKP,MAAMS,oBAGX,EAAKD,SAAS,CAACD,QAAQ,IACvB,EAAKP,MAAMU,oBAnBf,EAAKJ,MAAQ,CACTC,QAAQ,EACRI,KAAMX,EAAMW,MALD,E,sEA6Bf,OACI,yBAAKC,QAASC,KAAKV,KAAMW,UAAS,gBAAWD,KAAKP,MAAMC,OAAS,SAAW,KAAOM,KAAKP,MAAMK,U,GAhCtFI,IAAMC,WC6CXC,E,YA3CX,WAAYjB,GAAQ,IAAD,8BACf,4CAAMA,KAEDM,MAAQ,CACTY,MAAO,GAGX,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBARN,E,6EAYfP,KAAKL,UAAS,SAAAc,GAAS,MAAM,CAAEJ,MAAOI,EAAUJ,MAAQ,MACxDd,QAAQC,IAAI,mBAAqBQ,KAAKP,MAAMY,S,sCAK5CL,KAAKL,UAAS,SAAAc,GAAS,MAAM,CAAEJ,MAAOI,EAAUJ,MAAQ,MACxDd,QAAQC,IAAI,mBAAqBQ,KAAKP,MAAMY,S,+BAM5C,IADA,IAAIK,EAAO,GACFC,EAAE,EAAGA,EAAGX,KAAKb,MAAMuB,KAAMC,IAAK,CAEnC,IADA,IAAIC,EAAO,GACFC,EAAE,EAAGA,EAAEb,KAAKb,MAAMyB,KAAMC,IAC7BD,EAAKE,KACL,kBAACC,EAAA,EAAD,CAAKC,IAAKH,GACN,kBAAC,EAAD,CAAOhB,gBAAiBG,KAAKM,cAAeV,gBAAiBI,KAAKQ,cAAeV,KAAME,KAAKb,MAAM8B,QAAQC,UAGlHR,EAAKI,KAAK,kBAACK,EAAA,EAAD,CAAKH,IAAKL,GAAIC,IAE5B,OACA,kBAACQ,EAAA,EAAD,CAAWnB,UAAU,OACjB,kBAACkB,EAAA,EAAD,KAAK,kBAACJ,EAAA,EAAD,CAAKC,IAAI,KAAT,UAAqBhB,KAAKP,MAAMY,QACpCK,O,GAvCMR,IAAMC,W,QCkCVkB,E,qLA9BAC,GAEX,IADA,IAAIX,EAAIW,EAAMC,OAAS,EAChBZ,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIW,KAAKC,MAAMD,KAAKE,UAAYf,EAAI,IACpCgB,EAAOL,EAAMX,GACnBW,EAAMX,GAAKW,EAAMT,GACjBS,EAAMT,GAAKc,EAEb,OAAOL,I,wCAKP,OAAOtB,KAAK4B,aAAaC,K,+BAKzB,OACE,kBAACT,EAAA,EAAD,CAAWnB,UAAU,OACnB,kBAAC6B,EAAA,EAAD,KACE,wBAAI7B,UAAU,UAAd,eAEF,kBAAC,EAAD,CAAMS,KAAK,IAAIE,KAAK,IAAIK,QAASjB,KAAK+B,yB,GA1B5B7B,IAAMC,WCKJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4c61ba60.chunk.js","sourcesContent":["\nimport React from 'react';\n\n\n\nclass Woord extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = { \n            ticked: false,\n            word: props.word\n        };\n    \n    }\n\n    tickx = (elem) => {\n    }\n\n    tick = (elem) => {\n        console.log(\"click: !\" + elem);\n\n        if (this.state.ticked) {\n            this.setState({ticked: false})\n            this.props.onDecreaseScore();\n\n        } else {\n            this.setState({ticked: true})\n            this.props.onIncreaseScore();\n        }\n        \n      };\n\n    render() {\n        \n        return (\n            <div onClick={this.tick} className={`woord ${this.state.ticked ? \"ticked\" : \"\"}`}>{this.state.word}</div>\n        );\n    }\n}\n\nexport default Woord;","import React from 'react';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Woord from \"./Woord.js\"\n\nclass Bord extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { \n            score: 0\n        };\n\n        this.increaseScore = this.increaseScore.bind(this);\n        this.decreaseScore = this.decreaseScore.bind(this);\n    \n    }\n    increaseScore() {\n        this.setState(prevState  => ({ score: prevState.score + 1 }));\n        console.log(\"increaseScore!: \" + this.state.score);\n\n    }\n\n    decreaseScore() {\n        this.setState(prevState  => ({ score: prevState.score - 1 }));\n        console.log(\"decreaseScore!: \" + this.state.score);\n\n    }\n   \n    render() {\n        var rows = [];\n        for (var i=0; i< this.props.rows; i++) {\n            var cols = [];\n            for (var j=0; j<this.props.cols; j++) {\n                cols.push (\n                <Col key={j}>\n                    <Woord onIncreaseScore={this.increaseScore} onDecreaseScore={this.decreaseScore} word={this.props.woorden.pop()} />\n                </Col>);\n            }\n            rows.push(<Row key={i}>{cols}</Row>);\n        }\n        return (\n        <Container className=\"p-3\">\n            <Row><Col key=\"0\">Score: {this.state.score}</Col></Row>\n            {rows}\n        </Container>);\n    }\n}\n\nexport default Bord;","import React from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Container from 'react-bootstrap/Container'\nimport './App.css';\nimport Bord from \"./Bord.js\";\nimport WoordenAlgemeen from \"./woorden-algemeen.json\"\n\nclass App extends React.Component {\n\n\n  shuffleArray(array) {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n\n  woordenAlgemeen() {\n    return this.shuffleArray(WoordenAlgemeen);\n  }\n\n  render() {\n\n    return (\n      <Container className=\"p-3\">\n        <Jumbotron>\n          <h1 className=\"header\">Preekbingo</h1>\n        </Jumbotron>\n        <Bord rows=\"4\" cols=\"5\" woorden={this.woordenAlgemeen()} />\n\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}